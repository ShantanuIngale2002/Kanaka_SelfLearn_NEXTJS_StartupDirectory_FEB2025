Docs > https://nextjs.org/docs/app/getting-started

JS MASTERY TUTORIAL >>
	> youtube : https://youtu.be/Zq5fmkH0T78?si=vWEEUspJd92Ds8VW
	> figma : https://resource.jsmastery.pro/pitch-startup
	> GitHub : https://github.com/adrianhajdin/yc_directory
	> GitHub Readme.MD : https://github.com/adrianhajdin/yc_directory/blob/main/README.md

Theory in notebook but project started at 1:05



Important Installations >>

i. Next's Auth.js : https://authjs.dev/getting-started/installation?framework=next-js
	> npm i next-auth
ii. tailwind other libraries:
	> npm i @tailwindcss/typography tailwindcss-animate
iii. sanity
	> cli and npm i next-sanity@canary




+++++++++++++++ PROJECT INITIALIZATION +++++++++++++++++++++++++

Created yc_directory, open in vs code and using terminal:
	> npx create-next-app@latest ./
	> TS : y (type script)
	> ESLint : y (eslint for clean code)
	> tailwind : y (styling)
	> src : n (not required)
	> app router : y  (will be using router)
	> turbo pack : y (smooth app execution)
	> import alias : n (no need)

- In package.json we have to add two properties, since next-auth and other packages should be latest, not using react 18, add this in between scripts and dependencies :
	"packageManager": "npm@10.5.2",
  	"overrides": {
   		"react": "$react",
    		"react-dom": "$react-dom"
  	},




+++++++++++++++++++ NEXT-JS AUTH (using GitHub) ++++++++++++++++


- For Auth, using Next's Auth.js
	> npm i next-auth@beta
	> npx auth secret    then y

- Created 'yc_directory/auth.ts' and paste the code from doc for starter
- Created 'app/auth/[...nextauth]/auth.ts and pasted code from doc for starter
- Now from scratch getting GitHub-OAuth, go to connections/providers/GitHub in docs from left-side-bar
	> 1. GitHub - Create OAuth : https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app
		> Follow for steps and add app name and desc but for below add values as:
			- Homepage URL : http://localhost:3000 (for starter)
			- authorization callback : https://localhost:3000/api/auth/callback/github  (from doc)
		> Create application
		> Now click on generate a new client secret
		> in .env.local add Client Id and Secret as :
			- AUTH_GITHUB_ID="[id]"
			- AUTH_GITHUB_SECRET="[secret]"
		> downloaded - shuttle icon and added to application logo
		> update auth.ts with code on doc
			import NextAuth from "next-auth"
			import GitHub from "next-auth/providers/github"
 			export const { handlers, auth, signIn, signOut } = NextAuth({
  				providers: [GitHub],
			})




++++++++++++++++++++++++ CUSTOM CSS FOR (tailwind and global.css) AND SHADCN ++++++++++++++++++++++


- Now using tutorial's readme.MD, Copy custom "tailwind.config.ts" and globals.css custom css style properties.
- Installing tailwind pakages:
	> npm i @tailwindcss/typography tailwindcss-animate

- Now installing shad-cn:
	> goto https://ui.shadcn.com/docs/cli
	> in vs terminal use cli cmd : npx shadcn@latest init



++++++++++++++++++++++ LAYOUT AND COMPONENTS +++++++++++++++++++++++++

# layout.tsx is an skeleton for route it lies in, renders page.tsx as main page at {children}'s place

- Updated app/layout.tsx : for MetaData and font

- Created : app/components
	> to store client/server components
- Created : components/Navbar.tsx
	> scripted for navigation

- Created : (root)
	> route group as "/"
- Created : (root)/layout.tsx
	> <Navbar /> is added for all pages in (root)
	> {children} replaces page.tsx
- Created : (root)/page.tsx
	> Home page of the app

- Created : components/SeachForm.tsx (server C)
	> search bar integrated in (root)/page.tsx
- Created : components/SearchFormReset.tsx (Client C)
	> To support client button and reset() to be used in / integrated in above component.
- Created : components/StartupCard.tsx
	> To pass all cards info in this component and render with its template




+++++++++++++++ CUSTOM DATE FORMAT HANDLING +++++++++++++++++++++++
+++++++++++++++ EXTERNAL IMAGE LINK TRUST ISSUE +++++++++++++++++++


While scripting above files issue I got and solved:

1. posts have temp array data (posts), where post._createdAt = new Date(...). Now here was a issue of passing Date Object. Solution:
	- using Ctrl+P in VSCode search 'utils.ts' and add this function below cn() :

export function formatDate(date: string){
  return new Date(date).toLocaleDateString("en-IN", {
    month: 'long',
    day: "numeric",
    year: "numeric"
  });
}

2. The app has trust issue with image link from post.image. Solution:
	- using Crtl+P in VSCode search 'next.config.ts' and update NextConfig var as :

const nextConfig: NextConfig = {
  images: {
    dangerouslyAllowSVG: true,
    remotePatterns: [
      {
        protocol: "https",
        hostname: "*"
      }
    ]
  }
};



+++++++++++++ USING SHADCN BUTTON ++++++++++++++++++++++++

- Added shadcn's Button using > npx shadcn@latest add button
- New components/ui/Button.tsx is created now move all our "components" into that newly created components folder at 'ui' folder level and delete old.



++++++++++++++++++++++ INTEGRATING SANITY.IO ++++++++++++++++++++++

- Adding SANITY.IO >
- Now, logged in using Google (i used) or any to Sanity . io
- Created Project StartupDirectory (next js, from scratch)
- From overview, copy CLI cmd
	
	- GET CLI ON SANITY and paste it in project's terminal
	- Create a new project or select an existing one StartupDirectory (dy927hg2)
	- Select dataset to use production
	- Would you like to add configuration files for a Sanity project in this Next.js folder? Yes
	- Do you want to use TypeScript? Yes
	- Would you like an embedded Sanity Studio? Yes
	- What route do you want to use for the Studio? /studio
	- Select project template to use Clean project with no predefined schema types
	- Would you like to add the project ID and dataset to your .env.local file? Yes

- Now install latest sanity for api feature using
	> npm i next-sanity@canary

- Now typing 'loca.../studio' it gives error bcz sanity doesn't use turbopack yet.. Hence removing turbopack as:
	> package.json remove --turbopack from "dev": "next dev --turbopack"

- What does sanity have added in our project?
	1. sanity.cli.ts : cli cmd usable configs like var
	2. sanity.config.ts : sanity's self configuration to make it run
	3. sanity/lib/client : to create client based on info to get data and make call
	4. sanity/lib/image.ts : image url builder uploaded on sanity, no need (delete them)
	5. sanitly/lib/live.ts : can del
	6. sanity/schemaTypes/index.ts : contains schema info (its blank initially tho)
	7. sanity/env.ts : contains env's for sanity
	8. sanity/structure.ts : arrange of schema (we can manipulate)
	9. app/sanity/tool/page.tsx : shows their at ('/studio')



++++++++++++++++++ ADDING SANITY'S SCHEMAS +++++++++++++++++

- Now we need to setup schema for author which we will get from GitHub:
	> Created : sanity/schemaTypes/author.ts
	> defineType w/ properties and add fields
	> list this schema into sanity/schemaTypes/index.ts
	> for items pass array w/ this listItem included into sanity/structure.ts

- Now schema for startup:
	> Created : sanity/schemaTypes/startup.ts
	> defineType w/ properties and add fields w/ type and validations
	> list this schema into sanity/schemaTypes/index.ts
	> for items pass array w/ this listItem included into sanity/structure.ts

- We have used markdown type for 'pitch' field in startup.ts, for which we will need to install :
	> npm i sanity-plugin-markdown
	> add this into 'plugins' array in sanity.config.ts as:
		- import {markdownSchema} from 'sanity-plugin-markdown'
		- plugins:[...., markdownSchema(),]
	> also import markdown related css in app/layout.tsx as:
		- import 'easymde/dist/easymde.min.css';



+++++++++++++ SANITY'S STUDIO : lh/studio ++++++++++++++++++++++++++++

- Now in localhost.../studio/structure, We can see this folders/schemas are created and visible to be used.


- Adding one author and one startup in sanity at localhost.../studio/structure

- Now on 'Vision' option in lh/studio , we can query the data, example:
	> * means all data
	> *[type=='startup'] means from all data where type is startup
	> can checkout sanity's data fetching documentation



++++++++++++++++++++++ SANITY'S GROQ QUERY +++++++++++++++++++++++++

- Now, we are using static post, but now we need to use sanity's data that we stored using query and data fetching.

- Created /sanity/lib/queries.ts, where initial query has been added
- Now in app/(root)/page.tsx, we have added 'client' and STARTUPS_QUERY and got results.



++++++++++++++++++++++ SANITY'S TYPE-GEN +++++++++++++++++++++++++

- Now as we know, typescript is very type specific and hence we need to use TypeGen by sanity.
	> TypeGen creates types for Types for Sanity Schema and GROQ query results
	> Sanity TypeGen will create Types for queries that are assigned to a variable and use the defineQuery function.

TO use TypeGen:
    i. extract sanity schema
	> npx sanity@latest schema extract --path=./sanity/extract.json
    ii. create sanity-typegen.json in root folder
	> doc: https://www.sanity.io/learn/course/content-driven-web-application-foundations/generate-typescript-types#s-7cd40049889f
	> add from docs removing "src/" from 'schema' and 'generates' keys.
    iii. generate typegen
	> npx sanity@latest typegen generate
    iv. Now as we add new GROQ queries this cmd is required to be executed again unless we automate the process, using scripts, add scripts from docs for/from package.json into package.json's scripts key and end of it.
	> remove "src/" from path though.



+++++++++++ SANITY'S TYPE-GEN use - StartupTypeCard definition ++++++++++++++++++

- StartupTypeCard Type: Now as typegen is generated, we can determine our StartupTypeCard as:
    i. In startupCard.tsx:
	> export type StartupTypeCard = Omit<Startup, "author"> & {author?: Author}
	> it defines type using Startup and Author from /sanity/types.ts created when generated typegen
	> it can be exported hence in other files can be used
    ii. import it into page.tsx as well




+++++++++++ SANITY'S ISR Data Fetching / Validation Bottleneck ++++++++++++++++++

- Now, lets see a case, In /sanity/lib/client.ts :
	> we have set 'useCdn: true'
	> means to cache data from cdn ie.
		- Un-cached req is sent, from source, data saved in response gets saved in cache
		- For all req's, in next 60 secs, cached data will get delivered rather than source itself.
		- After 60 sec, for any req, new data from source will be acquired and will get cached again for next 60 secs
	> bottleneck:
		- suppose req has been made, and data is cached for 60 sec's.
		- Now at 20th sec some new records has been added, but the req's for next 40 sec's will not get this data but only cached data

	> Two solution:
		i. set 'useCdn: false' ie. get data always for any req from source directly.
		ii. Cache and Live API w/ next js (topic next to learn)




+++++++++++ SANITY'S ISR Data Fetching / Validation Bottleneck's Solution ++++++++++++++++++

+++++++++++ CACHE and LIVE API w/ NextJS ++++++++++++++++++


- setting useCdn as false, for every refresh we can get fresh data from source, BUT why on refresh? We can get data, immediately without need to refresh, using NextJS's Live Content API

- To setup, install a only server component supporting package:
	> npm i server-only

- Created /sanity/lib/live.ts and update w/:
	> export const {sanityFetch, SanityLive} = defineLive({client});

- Update .env.local w/:
	> NEXT_PUBLIC_SANITY_API_VERSION="v1"; or "vX";
	> but its giving the issue, instead use the current date when client is setting up. OR comment it, api version is already in 'env.ts' file likewise.

- update app/(root)/page.tsx w/
	> const {data: posts} =  await sanityFetch({query: STARTUPS_QUERY});
	> <SanityLive /> // at last in file after section-end



+++++++++++ REAL TIME SEARCH W/ URL QUERY PARAM ++++++++++++++++++

- In page.tsx, we were getting query from search, we can make use of it.
- add that query as param to sanityFetch method
- use it in sanity/lib/queries.ts, into the query

# Notes :
	> Search is done word-based or more like tokenization ie. for 'Banana wafers', 'banana' will work BUT not 'bana'
	> We have added functionality that when we click on card's category search is made, so check it out as well.



++++++++++++++++++++ PARTIAL PRE-RENDERING ++++++++++++++++

- Partial Prerendering enables rendering static and dynamic components together in the same route.
- During build, NextJS prerenders as much route (static) as possible, if any dynamic code is detected, sent for static rendering. React's Suspense can be used.
- Can understand PPR : https://youtu.be/MTcPrTIBkpA?si=Y3yKErp0zXTSy_H0






















